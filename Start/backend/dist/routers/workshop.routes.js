"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const workshop_controller_1 = require("../controllers/workshop.controller");
const workshopRouter = express_1.default.Router();
workshopRouter.route('/hi').get((req, res) => new workshop_controller_1.WorkshopController().hi(req, res));
workshopRouter.route('/insert').post((req, res) => new workshop_controller_1.WorkshopController().insert(req, res));
workshopRouter.route('/getAll').get((req, res) => new workshop_controller_1.WorkshopController().getAll(req, res));
workshopRouter.route('/deleteAllCommentsAndLikes').post((req, res) => new workshop_controller_1.WorkshopController().deleteAllCommentsAndLikes(req, res));
workshopRouter.route('/getAllForUser').post((req, res) => new workshop_controller_1.WorkshopController().getAllForUser(req, res));
workshopRouter.route('/getAllForUser2').post((req, res) => new workshop_controller_1.WorkshopController().getAllForUser2(req, res));
workshopRouter.route('/getAllForUser3').post((req, res) => new workshop_controller_1.WorkshopController().getAllForUser3(req, res));
workshopRouter.route('/getAllForUser4').get((req, res) => new workshop_controller_1.WorkshopController().getAllForUser4(req, res));
workshopRouter.route('/getComments').post((req, res) => new workshop_controller_1.WorkshopController().getComments(req, res));
workshopRouter.route('/getLikes').post((req, res) => new workshop_controller_1.WorkshopController().getLikes(req, res));
workshopRouter.route('/deleteLike').post((req, res) => new workshop_controller_1.WorkshopController().deleteLike(req, res));
workshopRouter.route('/deleteComment').post((req, res) => new workshop_controller_1.WorkshopController().deleteComment(req, res));
workshopRouter.route('/updateComment').post((req, res) => new workshop_controller_1.WorkshopController().updateComment(req, res));
workshopRouter.route('/povuciPrijavu').post((req, res) => new workshop_controller_1.WorkshopController().povuciPrijavu(req, res));
workshopRouter.route('/addPart').post((req, res) => new workshop_controller_1.WorkshopController().addPart(req, res));
workshopRouter.route('/alreadyPart').post((req, res) => new workshop_controller_1.WorkshopController().alreadyPart(req, res));
workshopRouter.route('/hastPastWorkshop').post((req, res) => new workshop_controller_1.WorkshopController().hastPastWorkshop(req, res));
workshopRouter.route('/getLikesForWorkshop').post((req, res) => new workshop_controller_1.WorkshopController().getLikesForWorkshop(req, res));
workshopRouter.route('/getCommentsForWorkshop').post((req, res) => new workshop_controller_1.WorkshopController().getCommentsForWorkshop(req, res));
workshopRouter.route('/addComment').post((req, res) => new workshop_controller_1.WorkshopController().addComment(req, res));
workshopRouter.route('/addLike').post((req, res) => new workshop_controller_1.WorkshopController().addLike(req, res));
workshopRouter.route('/update').post((req, res) => new workshop_controller_1.WorkshopController().update(req, res));
workshopRouter.route('/changeStatus').post((req, res) => new workshop_controller_1.WorkshopController().changeStatus(req, res));
workshopRouter.route('/getAllMessagesForUser').post((req, res) => new workshop_controller_1.WorkshopController().getAllMessagesForUser(req, res));
workshopRouter.route('/getOneWorkshop').post((req, res) => new workshop_controller_1.WorkshopController().getOneWorkshop(req, res));
workshopRouter.route('/getWorkshopById').post((req, res) => new workshop_controller_1.WorkshopController().getWorkshopById(req, res));
workshopRouter.route('/sendMsg').post((req, res) => new workshop_controller_1.WorkshopController().sendMsg(req, res));
workshopRouter.route('/getActiveWorkshops').get((req, res) => new workshop_controller_1.WorkshopController().getActiveWorkshops(req, res));
workshopRouter.route('/searchWorkshops').get((req, res) => new workshop_controller_1.WorkshopController().searchWorkshops(req, res));
workshopRouter.route('/searchTopWorkshop').get((req, res) => new workshop_controller_1.WorkshopController().searchTopWorkshop(req, res));
exports.default = workshopRouter;
//# sourceMappingURL=workshop.routes.js.map